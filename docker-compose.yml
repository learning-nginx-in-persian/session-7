services:
  certbot_init:
    image: certbot/certbot:latest
    environment:
      DOMAIN: ${DOMAIN}
      CERTBOT_EMAIL: ${CERTBOT_EMAIL}
    volumes:
      - letsencrypt:/etc/letsencrypt
    ports:
      - "80:80"
    command: >-
      certonly --standalone --preferred-challenges http
      -d ${DOMAIN} -m ${CERTBOT_EMAIL} --agree-tos --non-interactive -vvv
    restart: "no"

  backend_node:
    build:
      context: ./js_backend
      dockerfile: Dockerfile
    container_name: backend_node
    environment:
      - NODE_ENV=production
      - PORT=3000
    expose:
      - "3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:3000/ || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped

  backend_python:
    build:
      context: ./python_backend
    container_name: backend_python
    environment:
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8000
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:8000/"]
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      certbot_init:
        condition: service_completed_successfully
      backend_node:
        condition: service_healthy
      backend_python:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=Asia/Tehran
    volumes:
      - ./nginx_configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx_configs/conf.d:/etc/nginx/conf.d:ro
      - ./static_web/index.html:/data/www/index.html:ro
      - ./static_web/style.css:/data/www/style.css:ro
      - ./static_web/app.js:/data/www/app.js:ro
      - letsencrypt:/etc/letsencrypt
      - certbot-webroot:/var/www/certbot
      - nginx-cache:/data/nginx/cache
      - nginx-logs:/var/log/nginx
      - ./nginx_configs/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem:ro
    restart: unless-stopped

  certbot_renew:
    image: certbot/certbot:latest
    container_name: certbot_renew
    depends_on:
      certbot_init:
        condition: service_completed_successfully
    entrypoint: /bin/sh
    command: -c "while :; do certbot renew --webroot -w /var/www/certbot ; sleep ${RENEW_INTERVAL:-12h}; done"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot-webroot:/var/www/certbot
    restart: no

  nginx_reloader:
    image: alpine:3.20
    container_name: nginx_reloader
    depends_on:
      - nginx
    volumes:
      - letsencrypt:/etc/letsencrypt:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c '
        apk add --no-cache inotify-tools docker-cli >/dev/null;
        echo "watch /etc/letsencrypt/live changes";
        while :; do
          inotifywait -e create,modify,delete,move -r /etc/letsencrypt/live >/dev/null 2>&1;
          echo "certs changed: reloading nginx";
          docker kill -s HUP nginx >/dev/null 2>&1 || true;
        done
      '
    restart: unless-stopped

volumes:
  letsencrypt:
  certbot-webroot:
  nginx-cache:
  nginx-logs:

